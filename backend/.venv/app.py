import json
from flask import Flask, jsonify, request
from flask_cors import CORS
import google.generativeai as genai
from dotenv import load_dotenv
import os

#load environment variables from .env file
load_dotenv()

#get the api key from .env file
API_KEY = os.getenv('API_KEY')

#initialize flask app
app = Flask(__name__)
#enable CORS
CORS(app)

#setup google gemini ai api key
genai.configure(api_key=API_KEY)

#model configuration
generation_config = {
    "temperature": 0.8,
    "top_p": 0.95,
    "top_k": 64,
    "max_output_tokens": 1000,
    "response_mime_type": "application/json",  # Ensure response is JSON
}

model = genai.GenerativeModel(
    model_name="gemini-1.5-flash",
    generation_config=generation_config,
)


#define a route for generating quizes 
@app.route('/', methods=['POST'])
def get_quiz():
    #get data from input form in json
    data = request.json
    
    input_data = data.get('input')
    question_distribution = data.get('questionDistribution')

    prompt = f"""
    You are an assistant for a learning platform. Your job is to analyze the provided text (note about specific subject, or topic that you need to expand on) and generate based on the topic:

- {question_distribution.get('multipleChoice')} mutliple-choice questions (A,B,C,D). Each question should include the options and the correct answer ['question': '...', 'options': 'A': '...', 'B': '...', 'C': '...', 'D': '...', 'correct': '...' , ...]

- {question_distribution.get('trueFalse')} true or false questions. Each question should include the options and the correct answer, JSON something like
Question: '...'
Correct : '...'


- {question_distribution.get('openQuestions')} open questions. You need to generate a question and then user has a chance to write by himself what he knows or thinks about this subject. Later (not now) you are going to rate it depending on how good he knows the subject, mistakes he made, and how detailed the answer was depending on the topic. You are going to give them 0-100 score and give your feedback. Now i need you to give me an answer you would give to this question, that seems to be the best for you. Maximum 100 words. Do it for each question
Question: '...'
SuggestedAnswer: '...'

- {question_distribution.get('fillGaps')} fill the gaps question. You need to have a text (length that is suitable for a exercise with 4 gaps to be filled) generated by you completely or based on note user sent (altered or not, depends if it's suitable) and 4 gaps in text so user can select best option for each missing word/phrase. I need json like
Text: '...'
options gap1 : ...
correct : ...

Here is the topic: {input_data}
    """

    #start a chat session with ai model and give him a query
    chat_session = model.start_chat()
    response = chat_session.send_message(prompt)

    quiz_json = response.text

    try:
        # try to parse bot response as a JSON
        # and convert it into python dictionary
        quiz_data = json.loads(quiz_json)
    except json.JSONDecodeError as e:
        #raise an error while failed
        print(f"JSON decoding error: {e}")
        return jsonify({"error": "Failed to decode JSON response"}), 500
    
    #return json to client
    # print(jsonify(quiz_data))
    print("success")
    print(jsonify(quiz_data))
    return jsonify(quiz_data)

# run the flask app in debug mode to allow auto reloading while development
if __name__ == '__main__':
    app.run(debug=True)